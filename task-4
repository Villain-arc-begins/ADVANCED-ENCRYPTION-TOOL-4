import os
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.padding import PKCS7
import base64
import tkinter as tk
from tkinter import filedialog, messagebox

def derive_key(password: str, salt: bytes) -> bytes:
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000,
        backend=default_backend()
    )
    return kdf.derive(password.encode())

def encrypt_file(filepath, password):
    try:
        salt = os.urandom(16)
        iv = os.urandom(16)
        key = derive_key(password, salt)

        with open(filepath, 'rb') as f:
            plaintext = f.read()

        padder = PKCS7(algorithms.AES.block_size).padder()
        padded_data = padder.update(plaintext) + padder.finalize()
        cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
        encryptor = cipher.encryptor()
        ciphertext = encryptor.update(padded_data) + encryptor.finalize()
        encrypted_filepath = f"{filepath}.enc"
        with open(encrypted_filepath, 'wb') as f:
            f.write(salt + iv + ciphertext)

        messagebox.showinfo("Success", f"File encrypted successfully: {encrypted_filepath}")
    except Exception as e:
        messagebox.showerror("Error", f"Failed to encrypt the file: {e}")

def decrypt_file(filepath, password):
    try:
    
        with open(filepath, 'rb') as f:
            data = f.read()

        salt = data[:16]
        iv = data[16:32]
        ciphertext = data[32:]

        key = derive_key(password, salt)

        cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
        decryptor = cipher.decryptor()
        padded_plaintext = decryptor.update(ciphertext) + decryptor.finalize()

        unpadder = PKCS7(algorithms.AES.block_size).unpadder()
        plaintext = unpadder.update(padded_plaintext) + unpadder.finalize()

        decrypted_filepath = filepath.replace(".enc", "_decrypted")
        with open(decrypted_filepath, 'wb') as f:
            f.write(plaintext)

        messagebox.showinfo("Success", f"File decrypted successfully: {decrypted_filepath}")
    except Exception as e:
        messagebox.showerror("Error", f"Failed to decrypt the file: {e}")

def create_gui():
    def encrypt_action():
        filepath = filedialog.askopenfilename(title="Select a file to encrypt")
        if filepath:
            password = password_entry.get()
            if not password:
                messagebox.showwarning("Warning", "Please enter a password.")
                return
            encrypt_file(filepath, password)

    def decrypt_action():
        filepath = filedialog.askopenfilename(title="Select a file to decrypt")
        if filepath:
            password = password_entry.get()
            if not password:
                messagebox.showwarning("Warning", "Please enter a password.")
                return
            decrypt_file(filepath, password)

    root = tk.Tk()
    root.title("File Encryption Toolkit")
    root.geometry("400x200")

    tk.Label(root, text="Enter Password:").pack(pady=5)
    password_entry = tk.Entry(root, show="*", width=30)
    password_entry.pack(pady=5)

    tk.Button(root, text="Encrypt File", command=encrypt_action, width=20).pack(pady=10)
    tk.Button(root, text="Decrypt File", command=decrypt_action, width=20).pack(pady=10)

    root.mainloop()

if __name__ == "__main__":
    create_gui()
